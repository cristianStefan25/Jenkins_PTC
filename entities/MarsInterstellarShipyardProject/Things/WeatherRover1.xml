<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b2013"
 majorVersion="8"
 minorVersion="4"
 modelPersistenceProviderPackage="H2PersistenceProviderPackage"
 revision="0"
 schemaVersion="1040"
 universal="password">
    <Things>
        <Thing
         description=""
         documentationContent=""
         effectiveThingPackage="ConfiguredThing"
         enabled="true"
         homeMashup=""
         identifier=""
         lastModifiedDate="2019-10-10T12:31:13.873+03:00"
         name="WeatherRover1"
         projectName="MarsInterstellarShipyardProject"
         published="false"
         tags=""
         thingTemplate="WeatherRoverTemplate"
         valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <ThingShape>
                <PropertyDefinitions>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.isPersistent="true"
                     baseType="PASSWORD"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="TestExportPassword"
                     ordinal="2"></PropertyDefinition>
                </PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="InstallEntitiesFromRepository">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="InstallExtensions">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="InstallExtensionsMultiPart">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="InstallEntitiesFromRepository">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var hostName = "http://localhost"; 
                                        var appKeyValue = ApplicationKeys["AppKey"].GetKeyID();
                                        var targetURL = hostName + "/Thingworx/Importer?IgnoreBadValueStreamData=false&WithSubsystems=false&purpose=import&usedefaultdataprovider=false";
                                        // result: INFOTABLE dataShape: "FileSystemFile"
                                        var entities =  Things["VodafoneExtensionRepository"].GetFileListing({path: "/entities"});
                                        for each (var entity in entities.rows) {  
                                            var params = {
                                            	headers: {"appKey" : "3b98832b-f885-4a40-83e5-624a716bed01", 'x-thingworx-session': 'true', 'X-XSRF-TOKEN': 'TWX-XSRF-TOKEN-VALUE'  } /* JSON */,
                                            	repository: "VodafoneExtensionRepository" /* STRING */,
                                                url: targetURL /* STRING */,
                                                pathOnRepository: entity.path /* STRING */,
                                            };
                                            
                                            // result: JSON
                                            var result = Resources["ContentLoaderFunctions"].PostMultipart(params);   
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="InstallExtensions">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var hostName = "http://localhost"; 
                                        var appKeyValue = ApplicationKeys["AppKey"].GetKeyID();
                                        var targetURL = hostName + "/Thingworx/ExtensionPackageUploader?purpose=import";
                                        // result: INFOTABLE dataShape: "FileSystemFile"
                                        var extensions =  Things["VodafoneExtensionRepository"].GetFileListing({path: "/"});
                                        for each (var extension in extensions.rows) {
                                            logger.warn ("tryying to import " + extension.path); 
                                            
                                            var params = {
                                            		repository: "VodafoneExtensionRepository" /* STRING */,
                                                	url: targetURL /* STRING */,
                                                	pathOnRepository: extension.path /* STRING */,
                                            		appKey: "3b98832b-f885-4a40-83e5-624a716bed01" /* STRING */
                                            };
                                        
                                        // result: JSON
                                        var result = Resources["ExtensionsExport"].PostMultipartWithAppKey(params);
                                        
                                        
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="InstallExtensionsMultiPart">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        var hostName = "http://localhost"; 
                                        var appKeyValue = ApplicationKeys["AppKey"].GetKeyID();
                                        var targetURL = hostName + "/Thingworx/ExtensionPackageUploader?purpose=import";
                                        // result: INFOTABLE dataShape: "FileSystemFile"
                                        var extensions =  Things["VodafoneExtensionRepository"].GetFileListing({path: "/"});
                                        for each (var extension in extensions.rows) {  
                                            var params = {
                                            	headers: {"appKey" : "3b98832b-f885-4a40-83e5-624a716bed01", 'x-thingworx-session': 'true', 'X-XSRF-TOKEN': 'TWX-XSRF-TOKEN-VALUE'  } /* JSON */,
                                            	repository: "VodafoneExtensionRepository" /* STRING */,
                                                url: targetURL /* STRING */,
                                                pathOnRepository: extension.path /* STRING */,
                                            };
                                            
                                            // result: JSON
                                            var result = Resources["ContentLoaderFunctions"].PostMultipart(params);   
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions></Subscriptions>
            </ThingShape>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations>
                <AlertDefinitions
                 name="TestExportPassword"></AlertDefinitions>
            </AlertConfigurations>
            <ImplementedShapes></ImplementedShapes>
            <ThingProperties>
                <PowerConsumed>
                    <Value>5.0</Value>
                    <Timestamp>2019-04-03T15:24:26.430+03:00</Timestamp>
                    <Quality>GOOD</Quality>
                </PowerConsumed>
                <HighPriority>
                    <Value>false</Value>
                    <Timestamp>1970-01-01T02:00:00.000+02:00</Timestamp>
                    <Quality>UNKNOWN</Quality>
                </HighPriority>
                <OverallStatus>
                    <Value>
                    <![CDATA[
                    Online
                    ]]>
                    </Value>
                    <Timestamp>2019-04-05T17:45:57.903+03:00</Timestamp>
                    <Quality>GOOD</Quality>
                </OverallStatus>
                <PowerProduced>
                    <Value>0.0</Value>
                    <Timestamp>1970-01-01T02:00:00.000+02:00</Timestamp>
                    <Quality>UNKNOWN</Quality>
                </PowerProduced>
                <TestExportPassword>
                    <Value></Value>
                    <Timestamp>2019-05-23T11:58:44.918+03:00</Timestamp>
                    <Quality>GOOD</Quality>
                </TestExportPassword>
            </ThingProperties>
        </Thing>
    </Things>
</Entities>
